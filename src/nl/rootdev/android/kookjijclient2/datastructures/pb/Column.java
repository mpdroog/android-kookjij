// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from column.proto

package nl.rootdev.android.kookjijclient2.datastructures.pb;

import java.io.IOException;

import com.dyuproject.protostuff.me.Input;
import com.dyuproject.protostuff.me.Message;
import com.dyuproject.protostuff.me.Output;
import com.dyuproject.protostuff.me.Schema;
import com.dyuproject.protostuff.me.UninitializedMessageException;

public final class Column implements Message, Schema
{

    public static Schema getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Column getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Column DEFAULT_INSTANCE = new Column();

    
    private String name;
    private String text;
    private String image;

    public Column()
    {
        
    }

    public Column(
        String name,
        String text
    )
    {
        this.name = name;
        this.text = text;
    }

    // getters and setters

    // name

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    // text

    public String getText()
    {
        return text;
    }

    public void setText(String text)
    {
        this.text = text;
    }

    // image

    public String getImage()
    {
        return image;
    }

    public void setImage(String image)
    {
        this.image = image;
    }

    // message method

    public Schema cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Object /*Column*/ newMessage()
    {
        return new Column();
    }

    public Class typeClass()
    {
        return Column.class;
    }

    public String messageName()
    {
        return "Column";
    }

    public String messageFullName()
    {
        return Column.class.getName();
    }

    public boolean isInitialized(Object /*Column*/ messageObj)
    {
        Column message = (Column)messageObj;
        return 
            message.name != null 
            && message.text != null;
    }

    public void mergeFrom(Input input, Object /*Column*/ messageObj) throws IOException
    {
        Column message = (Column)messageObj;
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;

                case 2:
                    message.text = input.readString();
                    break;

                case 3:
                    message.image = input.readString();
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }



    public void writeTo(Output output, Object /*Column*/ messageObj) throws IOException
    {
        Column message = (Column)messageObj;
        if(message.name == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.name, false);


        if(message.text == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.text, false);


        if(message.image != null)
            output.writeString(3, message.image, false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "name";
            case 2: return "text";
            case 3: return "image";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = (Integer)__fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.Hashtable __fieldMap = new java.util.Hashtable();
    static
    {
        __fieldMap.put("name", new Integer(1));
        __fieldMap.put("text", new Integer(2));
        __fieldMap.put("image", new Integer(3));
    }
    
}
